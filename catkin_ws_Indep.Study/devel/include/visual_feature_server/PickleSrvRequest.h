// Generated by gencpp from file visual_feature_server/PickleSrvRequest.msg
// DO NOT EDIT!


#ifndef VISUAL_FEATURE_SERVER_MESSAGE_PICKLESRVREQUEST_H
#define VISUAL_FEATURE_SERVER_MESSAGE_PICKLESRVREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace visual_feature_server
{
template <class ContainerAllocator>
struct PickleSrvRequest_
{
  typedef PickleSrvRequest_<ContainerAllocator> Type;

  PickleSrvRequest_()
    : data()
    , filePath()  {
    }
  PickleSrvRequest_(const ContainerAllocator& _alloc)
    : data(_alloc)
    , filePath(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _data_type;
  _data_type data;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _filePath_type;
  _filePath_type filePath;





  typedef boost::shared_ptr< ::visual_feature_server::PickleSrvRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::visual_feature_server::PickleSrvRequest_<ContainerAllocator> const> ConstPtr;

}; // struct PickleSrvRequest_

typedef ::visual_feature_server::PickleSrvRequest_<std::allocator<void> > PickleSrvRequest;

typedef boost::shared_ptr< ::visual_feature_server::PickleSrvRequest > PickleSrvRequestPtr;
typedef boost::shared_ptr< ::visual_feature_server::PickleSrvRequest const> PickleSrvRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::visual_feature_server::PickleSrvRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::visual_feature_server::PickleSrvRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::visual_feature_server::PickleSrvRequest_<ContainerAllocator1> & lhs, const ::visual_feature_server::PickleSrvRequest_<ContainerAllocator2> & rhs)
{
  return lhs.data == rhs.data &&
    lhs.filePath == rhs.filePath;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::visual_feature_server::PickleSrvRequest_<ContainerAllocator1> & lhs, const ::visual_feature_server::PickleSrvRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace visual_feature_server

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::visual_feature_server::PickleSrvRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::visual_feature_server::PickleSrvRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::visual_feature_server::PickleSrvRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::visual_feature_server::PickleSrvRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::visual_feature_server::PickleSrvRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::visual_feature_server::PickleSrvRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::visual_feature_server::PickleSrvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6f6f5f7e32546c979f85bb54e6a0f4a5";
  }

  static const char* value(const ::visual_feature_server::PickleSrvRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6f6f5f7e32546c97ULL;
  static const uint64_t static_value2 = 0x9f85bb54e6a0f4a5ULL;
};

template<class ContainerAllocator>
struct DataType< ::visual_feature_server::PickleSrvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "visual_feature_server/PickleSrvRequest";
  }

  static const char* value(const ::visual_feature_server::PickleSrvRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::visual_feature_server::PickleSrvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64[] data\n"
"string filePath\n"
"\n"
;
  }

  static const char* value(const ::visual_feature_server::PickleSrvRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::visual_feature_server::PickleSrvRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.data);
      stream.next(m.filePath);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PickleSrvRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::visual_feature_server::PickleSrvRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::visual_feature_server::PickleSrvRequest_<ContainerAllocator>& v)
  {
    s << indent << "data[]" << std::endl;
    for (size_t i = 0; i < v.data.size(); ++i)
    {
      s << indent << "  data[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.data[i]);
    }
    s << indent << "filePath: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.filePath);
  }
};

} // namespace message_operations
} // namespace ros

#endif // VISUAL_FEATURE_SERVER_MESSAGE_PICKLESRVREQUEST_H
