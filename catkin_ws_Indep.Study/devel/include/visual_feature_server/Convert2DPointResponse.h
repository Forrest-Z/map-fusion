// Generated by gencpp from file visual_feature_server/Convert2DPointResponse.msg
// DO NOT EDIT!


#ifndef VISUAL_FEATURE_SERVER_MESSAGE_CONVERT2DPOINTRESPONSE_H
#define VISUAL_FEATURE_SERVER_MESSAGE_CONVERT2DPOINTRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace visual_feature_server
{
template <class ContainerAllocator>
struct Convert2DPointResponse_
{
  typedef Convert2DPointResponse_<ContainerAllocator> Type;

  Convert2DPointResponse_()
    : x_source()
    , y_source()
    , z_source()
    , x_dest()
    , y_dest()
    , z_dest()  {
    }
  Convert2DPointResponse_(const ContainerAllocator& _alloc)
    : x_source(_alloc)
    , y_source(_alloc)
    , z_source(_alloc)
    , x_dest(_alloc)
    , y_dest(_alloc)
    , z_dest(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _x_source_type;
  _x_source_type x_source;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _y_source_type;
  _y_source_type y_source;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _z_source_type;
  _z_source_type z_source;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _x_dest_type;
  _x_dest_type x_dest;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _y_dest_type;
  _y_dest_type y_dest;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _z_dest_type;
  _z_dest_type z_dest;





  typedef boost::shared_ptr< ::visual_feature_server::Convert2DPointResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::visual_feature_server::Convert2DPointResponse_<ContainerAllocator> const> ConstPtr;

}; // struct Convert2DPointResponse_

typedef ::visual_feature_server::Convert2DPointResponse_<std::allocator<void> > Convert2DPointResponse;

typedef boost::shared_ptr< ::visual_feature_server::Convert2DPointResponse > Convert2DPointResponsePtr;
typedef boost::shared_ptr< ::visual_feature_server::Convert2DPointResponse const> Convert2DPointResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::visual_feature_server::Convert2DPointResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::visual_feature_server::Convert2DPointResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::visual_feature_server::Convert2DPointResponse_<ContainerAllocator1> & lhs, const ::visual_feature_server::Convert2DPointResponse_<ContainerAllocator2> & rhs)
{
  return lhs.x_source == rhs.x_source &&
    lhs.y_source == rhs.y_source &&
    lhs.z_source == rhs.z_source &&
    lhs.x_dest == rhs.x_dest &&
    lhs.y_dest == rhs.y_dest &&
    lhs.z_dest == rhs.z_dest;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::visual_feature_server::Convert2DPointResponse_<ContainerAllocator1> & lhs, const ::visual_feature_server::Convert2DPointResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace visual_feature_server

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::visual_feature_server::Convert2DPointResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::visual_feature_server::Convert2DPointResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::visual_feature_server::Convert2DPointResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::visual_feature_server::Convert2DPointResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::visual_feature_server::Convert2DPointResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::visual_feature_server::Convert2DPointResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::visual_feature_server::Convert2DPointResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ab4d89ce84f35328de2f5124bef6a8d2";
  }

  static const char* value(const ::visual_feature_server::Convert2DPointResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xab4d89ce84f35328ULL;
  static const uint64_t static_value2 = 0xde2f5124bef6a8d2ULL;
};

template<class ContainerAllocator>
struct DataType< ::visual_feature_server::Convert2DPointResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "visual_feature_server/Convert2DPointResponse";
  }

  static const char* value(const ::visual_feature_server::Convert2DPointResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::visual_feature_server::Convert2DPointResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"float64[] x_source\n"
"float64[] y_source\n"
"float64[] z_source\n"
"\n"
"float64[] x_dest\n"
"float64[] y_dest\n"
"float64[] z_dest\n"
"\n"
;
  }

  static const char* value(const ::visual_feature_server::Convert2DPointResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::visual_feature_server::Convert2DPointResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x_source);
      stream.next(m.y_source);
      stream.next(m.z_source);
      stream.next(m.x_dest);
      stream.next(m.y_dest);
      stream.next(m.z_dest);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Convert2DPointResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::visual_feature_server::Convert2DPointResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::visual_feature_server::Convert2DPointResponse_<ContainerAllocator>& v)
  {
    s << indent << "x_source[]" << std::endl;
    for (size_t i = 0; i < v.x_source.size(); ++i)
    {
      s << indent << "  x_source[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.x_source[i]);
    }
    s << indent << "y_source[]" << std::endl;
    for (size_t i = 0; i < v.y_source.size(); ++i)
    {
      s << indent << "  y_source[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.y_source[i]);
    }
    s << indent << "z_source[]" << std::endl;
    for (size_t i = 0; i < v.z_source.size(); ++i)
    {
      s << indent << "  z_source[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.z_source[i]);
    }
    s << indent << "x_dest[]" << std::endl;
    for (size_t i = 0; i < v.x_dest.size(); ++i)
    {
      s << indent << "  x_dest[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.x_dest[i]);
    }
    s << indent << "y_dest[]" << std::endl;
    for (size_t i = 0; i < v.y_dest.size(); ++i)
    {
      s << indent << "  y_dest[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.y_dest[i]);
    }
    s << indent << "z_dest[]" << std::endl;
    for (size_t i = 0; i < v.z_dest.size(); ++i)
    {
      s << indent << "  z_dest[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.z_dest[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // VISUAL_FEATURE_SERVER_MESSAGE_CONVERT2DPOINTRESPONSE_H
