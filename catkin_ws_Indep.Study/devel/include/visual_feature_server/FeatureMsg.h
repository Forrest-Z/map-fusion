// Generated by gencpp from file visual_feature_server/FeatureMsg.msg
// DO NOT EDIT!


#ifndef VISUAL_FEATURE_SERVER_MESSAGE_FEATUREMSG_H
#define VISUAL_FEATURE_SERVER_MESSAGE_FEATUREMSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <visual_feature_server/BlobFeatureMsg.h>
#include <visual_feature_server/CornerFeatureMsg.h>
#include <visual_feature_server/EdgeFeatureMsg.h>

namespace visual_feature_server
{
template <class ContainerAllocator>
struct FeatureMsg_
{
  typedef FeatureMsg_<ContainerAllocator> Type;

  FeatureMsg_()
    : name()
    , type(0)
    , image_scale(0.0)
    , world_scale(0.0)
    , blobFeature()
    , cornerFeature()
    , edgeFeature()
    , confidence(0.0)
    , x_pixel(0)
    , y_pixel(0)  {
    }
  FeatureMsg_(const ContainerAllocator& _alloc)
    : name(_alloc)
    , type(0)
    , image_scale(0.0)
    , world_scale(0.0)
    , blobFeature(_alloc)
    , cornerFeature(_alloc)
    , edgeFeature(_alloc)
    , confidence(0.0)
    , x_pixel(0)
    , y_pixel(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _name_type;
  _name_type name;

   typedef int32_t _type_type;
  _type_type type;

   typedef float _image_scale_type;
  _image_scale_type image_scale;

   typedef float _world_scale_type;
  _world_scale_type world_scale;

   typedef  ::visual_feature_server::BlobFeatureMsg_<ContainerAllocator>  _blobFeature_type;
  _blobFeature_type blobFeature;

   typedef  ::visual_feature_server::CornerFeatureMsg_<ContainerAllocator>  _cornerFeature_type;
  _cornerFeature_type cornerFeature;

   typedef  ::visual_feature_server::EdgeFeatureMsg_<ContainerAllocator>  _edgeFeature_type;
  _edgeFeature_type edgeFeature;

   typedef float _confidence_type;
  _confidence_type confidence;

   typedef int32_t _x_pixel_type;
  _x_pixel_type x_pixel;

   typedef int32_t _y_pixel_type;
  _y_pixel_type y_pixel;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(CORNER)
  #undef CORNER
#endif
#if defined(_WIN32) && defined(BLOB)
  #undef BLOB
#endif
#if defined(_WIN32) && defined(EDGE)
  #undef EDGE
#endif
#if defined(_WIN32) && defined(CORNER_STR)
  #undef CORNER_STR
#endif
#if defined(_WIN32) && defined(BLOB_STR)
  #undef BLOB_STR
#endif
#if defined(_WIN32) && defined(EDGE_STR)
  #undef EDGE_STR
#endif

  enum {
    CORNER = 1u,
    BLOB = 2u,
    EDGE = 3u,
  };

  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  CORNER_STR;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  BLOB_STR;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  EDGE_STR;

  typedef boost::shared_ptr< ::visual_feature_server::FeatureMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::visual_feature_server::FeatureMsg_<ContainerAllocator> const> ConstPtr;

}; // struct FeatureMsg_

typedef ::visual_feature_server::FeatureMsg_<std::allocator<void> > FeatureMsg;

typedef boost::shared_ptr< ::visual_feature_server::FeatureMsg > FeatureMsgPtr;
typedef boost::shared_ptr< ::visual_feature_server::FeatureMsg const> FeatureMsgConstPtr;

// constants requiring out of line definition

   

   

   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      FeatureMsg_<ContainerAllocator>::CORNER_STR =
        
          "\"corner\""
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      FeatureMsg_<ContainerAllocator>::BLOB_STR =
        
          "\"blob\""
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      FeatureMsg_<ContainerAllocator>::EDGE_STR =
        
          "\"edge\""
        
        ;
   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::visual_feature_server::FeatureMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::visual_feature_server::FeatureMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::visual_feature_server::FeatureMsg_<ContainerAllocator1> & lhs, const ::visual_feature_server::FeatureMsg_<ContainerAllocator2> & rhs)
{
  return lhs.name == rhs.name &&
    lhs.type == rhs.type &&
    lhs.image_scale == rhs.image_scale &&
    lhs.world_scale == rhs.world_scale &&
    lhs.blobFeature == rhs.blobFeature &&
    lhs.cornerFeature == rhs.cornerFeature &&
    lhs.edgeFeature == rhs.edgeFeature &&
    lhs.confidence == rhs.confidence &&
    lhs.x_pixel == rhs.x_pixel &&
    lhs.y_pixel == rhs.y_pixel;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::visual_feature_server::FeatureMsg_<ContainerAllocator1> & lhs, const ::visual_feature_server::FeatureMsg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace visual_feature_server

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::visual_feature_server::FeatureMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::visual_feature_server::FeatureMsg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::visual_feature_server::FeatureMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::visual_feature_server::FeatureMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::visual_feature_server::FeatureMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::visual_feature_server::FeatureMsg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::visual_feature_server::FeatureMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "93ea47ac84f852fc7e6fbfcdf7865fee";
  }

  static const char* value(const ::visual_feature_server::FeatureMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x93ea47ac84f852fcULL;
  static const uint64_t static_value2 = 0x7e6fbfcdf7865feeULL;
};

template<class ContainerAllocator>
struct DataType< ::visual_feature_server::FeatureMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "visual_feature_server/FeatureMsg";
  }

  static const char* value(const ::visual_feature_server::FeatureMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::visual_feature_server::FeatureMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 CORNER=1\n"
"uint8 BLOB=2\n"
"uint8 EDGE=3\n"
"string CORNER_STR=\"corner\"\n"
"string BLOB_STR=\"blob\"\n"
"string EDGE_STR=\"edge\"\n"
"\n"
"string name\n"
"int32 type\n"
"\n"
"float32 image_scale\n"
"float32 world_scale\n"
"\n"
"BlobFeatureMsg blobFeature\n"
"CornerFeatureMsg cornerFeature\n"
"EdgeFeatureMsg edgeFeature\n"
"\n"
"#recognition confidence\n"
"float32 confidence\n"
"int32 x_pixel\n"
"int32 y_pixel\n"
"\n"
"================================================================================\n"
"MSG: visual_feature_server/BlobFeatureMsg\n"
"uint8 hHigh\n"
"uint8 sHigh\n"
"uint8 vHigh\n"
"uint8 hLow\n"
"uint8 sLow\n"
"uint8 vLow\n"
"#uint8 scale\n"
"uint8 threshold\n"
"\n"
"#pose of the feature\n"
"geometry_msgs/PoseWithCovarianceStamped centroid\n"
"#geometry_msgs/PoseWithCovarianceStamped top_left\n"
"#geometry_msgs/PoseWithCovarianceStamped top_right\n"
"#geometry_msgs/PoseWithCovarianceStamped bottom_left\n"
"#geometry_msgs/PoseWithCovarianceStamped bottom_right\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/PoseWithCovarianceStamped\n"
"# This expresses an estimated pose with a reference coordinate frame and timestamp\n"
"\n"
"Header header\n"
"PoseWithCovariance pose\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/PoseWithCovariance\n"
"# This represents a pose in free space with uncertainty.\n"
"\n"
"Pose pose\n"
"\n"
"# Row-major representation of the 6x6 covariance matrix\n"
"# The orientation parameters use a fixed-axis representation.\n"
"# In order, the parameters are:\n"
"# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)\n"
"float64[36] covariance\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: visual_feature_server/CornerFeatureMsg\n"
"uint8 threshold\n"
"#uint8 scale\n"
"\n"
"geometry_msgs/PoseWithCovarianceStamped centroid\n"
"\n"
"================================================================================\n"
"MSG: visual_feature_server/EdgeFeatureMsg\n"
"uint8 threshold\n"
"#uint8 scale\n"
"\n"
"# geometry_msgs/PoseWithCovarianceStamped p1\n"
"# geometry_msgs/PoseWithCovarianceStamped p2\n"
"geometry_msgs/PoseWithCovarianceStamped centroid\n"
;
  }

  static const char* value(const ::visual_feature_server::FeatureMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::visual_feature_server::FeatureMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.name);
      stream.next(m.type);
      stream.next(m.image_scale);
      stream.next(m.world_scale);
      stream.next(m.blobFeature);
      stream.next(m.cornerFeature);
      stream.next(m.edgeFeature);
      stream.next(m.confidence);
      stream.next(m.x_pixel);
      stream.next(m.y_pixel);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct FeatureMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::visual_feature_server::FeatureMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::visual_feature_server::FeatureMsg_<ContainerAllocator>& v)
  {
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name);
    s << indent << "type: ";
    Printer<int32_t>::stream(s, indent + "  ", v.type);
    s << indent << "image_scale: ";
    Printer<float>::stream(s, indent + "  ", v.image_scale);
    s << indent << "world_scale: ";
    Printer<float>::stream(s, indent + "  ", v.world_scale);
    s << indent << "blobFeature: ";
    s << std::endl;
    Printer< ::visual_feature_server::BlobFeatureMsg_<ContainerAllocator> >::stream(s, indent + "  ", v.blobFeature);
    s << indent << "cornerFeature: ";
    s << std::endl;
    Printer< ::visual_feature_server::CornerFeatureMsg_<ContainerAllocator> >::stream(s, indent + "  ", v.cornerFeature);
    s << indent << "edgeFeature: ";
    s << std::endl;
    Printer< ::visual_feature_server::EdgeFeatureMsg_<ContainerAllocator> >::stream(s, indent + "  ", v.edgeFeature);
    s << indent << "confidence: ";
    Printer<float>::stream(s, indent + "  ", v.confidence);
    s << indent << "x_pixel: ";
    Printer<int32_t>::stream(s, indent + "  ", v.x_pixel);
    s << indent << "y_pixel: ";
    Printer<int32_t>::stream(s, indent + "  ", v.y_pixel);
  }
};

} // namespace message_operations
} // namespace ros

#endif // VISUAL_FEATURE_SERVER_MESSAGE_FEATUREMSG_H
