// Generated by gencpp from file visual_feature_server/Convert2DPointRequest.msg
// DO NOT EDIT!


#ifndef VISUAL_FEATURE_SERVER_MESSAGE_CONVERT2DPOINTREQUEST_H
#define VISUAL_FEATURE_SERVER_MESSAGE_CONVERT2DPOINTREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace visual_feature_server
{
template <class ContainerAllocator>
struct Convert2DPointRequest_
{
  typedef Convert2DPointRequest_<ContainerAllocator> Type;

  Convert2DPointRequest_()
    : stamp()
    , x()
    , y()
    , source_frame()
    , destination_frame()  {
    }
  Convert2DPointRequest_(const ContainerAllocator& _alloc)
    : stamp()
    , x(_alloc)
    , y(_alloc)
    , source_frame(_alloc)
    , destination_frame(_alloc)  {
  (void)_alloc;
    }



   typedef ros::Time _stamp_type;
  _stamp_type stamp;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _x_type;
  _x_type x;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _y_type;
  _y_type y;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _source_frame_type;
  _source_frame_type source_frame;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _destination_frame_type;
  _destination_frame_type destination_frame;





  typedef boost::shared_ptr< ::visual_feature_server::Convert2DPointRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::visual_feature_server::Convert2DPointRequest_<ContainerAllocator> const> ConstPtr;

}; // struct Convert2DPointRequest_

typedef ::visual_feature_server::Convert2DPointRequest_<std::allocator<void> > Convert2DPointRequest;

typedef boost::shared_ptr< ::visual_feature_server::Convert2DPointRequest > Convert2DPointRequestPtr;
typedef boost::shared_ptr< ::visual_feature_server::Convert2DPointRequest const> Convert2DPointRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::visual_feature_server::Convert2DPointRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::visual_feature_server::Convert2DPointRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::visual_feature_server::Convert2DPointRequest_<ContainerAllocator1> & lhs, const ::visual_feature_server::Convert2DPointRequest_<ContainerAllocator2> & rhs)
{
  return lhs.stamp == rhs.stamp &&
    lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.source_frame == rhs.source_frame &&
    lhs.destination_frame == rhs.destination_frame;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::visual_feature_server::Convert2DPointRequest_<ContainerAllocator1> & lhs, const ::visual_feature_server::Convert2DPointRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace visual_feature_server

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::visual_feature_server::Convert2DPointRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::visual_feature_server::Convert2DPointRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::visual_feature_server::Convert2DPointRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::visual_feature_server::Convert2DPointRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::visual_feature_server::Convert2DPointRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::visual_feature_server::Convert2DPointRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::visual_feature_server::Convert2DPointRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2a1f2197011561a384f51fa793dee78b";
  }

  static const char* value(const ::visual_feature_server::Convert2DPointRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2a1f2197011561a3ULL;
  static const uint64_t static_value2 = 0x84f51fa793dee78bULL;
};

template<class ContainerAllocator>
struct DataType< ::visual_feature_server::Convert2DPointRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "visual_feature_server/Convert2DPointRequest";
  }

  static const char* value(const ::visual_feature_server::Convert2DPointRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::visual_feature_server::Convert2DPointRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "time stamp\n"
"float64[] x\n"
"float64[] y\n"
"string source_frame\n"
"string destination_frame\n"
"\n"
;
  }

  static const char* value(const ::visual_feature_server::Convert2DPointRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::visual_feature_server::Convert2DPointRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.stamp);
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.source_frame);
      stream.next(m.destination_frame);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Convert2DPointRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::visual_feature_server::Convert2DPointRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::visual_feature_server::Convert2DPointRequest_<ContainerAllocator>& v)
  {
    s << indent << "stamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.stamp);
    s << indent << "x[]" << std::endl;
    for (size_t i = 0; i < v.x.size(); ++i)
    {
      s << indent << "  x[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.x[i]);
    }
    s << indent << "y[]" << std::endl;
    for (size_t i = 0; i < v.y.size(); ++i)
    {
      s << indent << "  y[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.y[i]);
    }
    s << indent << "source_frame: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.source_frame);
    s << indent << "destination_frame: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.destination_frame);
  }
};

} // namespace message_operations
} // namespace ros

#endif // VISUAL_FEATURE_SERVER_MESSAGE_CONVERT2DPOINTREQUEST_H
