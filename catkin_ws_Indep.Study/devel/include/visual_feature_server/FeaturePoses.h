// Generated by gencpp from file visual_feature_server/FeaturePoses.msg
// DO NOT EDIT!


#ifndef VISUAL_FEATURE_SERVER_MESSAGE_FEATUREPOSES_H
#define VISUAL_FEATURE_SERVER_MESSAGE_FEATUREPOSES_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <visual_feature_server/FeatureMsg.h>

namespace visual_feature_server
{
template <class ContainerAllocator>
struct FeaturePoses_
{
  typedef FeaturePoses_<ContainerAllocator> Type;

  FeaturePoses_()
    : stamp()
    , features()  {
    }
  FeaturePoses_(const ContainerAllocator& _alloc)
    : stamp()
    , features(_alloc)  {
  (void)_alloc;
    }



   typedef ros::Time _stamp_type;
  _stamp_type stamp;

   typedef std::vector< ::visual_feature_server::FeatureMsg_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::visual_feature_server::FeatureMsg_<ContainerAllocator> >::other >  _features_type;
  _features_type features;





  typedef boost::shared_ptr< ::visual_feature_server::FeaturePoses_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::visual_feature_server::FeaturePoses_<ContainerAllocator> const> ConstPtr;

}; // struct FeaturePoses_

typedef ::visual_feature_server::FeaturePoses_<std::allocator<void> > FeaturePoses;

typedef boost::shared_ptr< ::visual_feature_server::FeaturePoses > FeaturePosesPtr;
typedef boost::shared_ptr< ::visual_feature_server::FeaturePoses const> FeaturePosesConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::visual_feature_server::FeaturePoses_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::visual_feature_server::FeaturePoses_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::visual_feature_server::FeaturePoses_<ContainerAllocator1> & lhs, const ::visual_feature_server::FeaturePoses_<ContainerAllocator2> & rhs)
{
  return lhs.stamp == rhs.stamp &&
    lhs.features == rhs.features;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::visual_feature_server::FeaturePoses_<ContainerAllocator1> & lhs, const ::visual_feature_server::FeaturePoses_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace visual_feature_server

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::visual_feature_server::FeaturePoses_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::visual_feature_server::FeaturePoses_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::visual_feature_server::FeaturePoses_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::visual_feature_server::FeaturePoses_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::visual_feature_server::FeaturePoses_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::visual_feature_server::FeaturePoses_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::visual_feature_server::FeaturePoses_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8329d4cd40eb21004182798fbd3b3cb5";
  }

  static const char* value(const ::visual_feature_server::FeaturePoses_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8329d4cd40eb2100ULL;
  static const uint64_t static_value2 = 0x4182798fbd3b3cb5ULL;
};

template<class ContainerAllocator>
struct DataType< ::visual_feature_server::FeaturePoses_<ContainerAllocator> >
{
  static const char* value()
  {
    return "visual_feature_server/FeaturePoses";
  }

  static const char* value(const ::visual_feature_server::FeaturePoses_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::visual_feature_server::FeaturePoses_<ContainerAllocator> >
{
  static const char* value()
  {
    return "time stamp\n"
"\n"
"FeatureMsg[] features\n"
"\n"
"================================================================================\n"
"MSG: visual_feature_server/FeatureMsg\n"
"uint8 CORNER=1\n"
"uint8 BLOB=2\n"
"uint8 EDGE=3\n"
"string CORNER_STR=\"corner\"\n"
"string BLOB_STR=\"blob\"\n"
"string EDGE_STR=\"edge\"\n"
"\n"
"string name\n"
"int32 type\n"
"\n"
"float32 image_scale\n"
"float32 world_scale\n"
"\n"
"BlobFeatureMsg blobFeature\n"
"CornerFeatureMsg cornerFeature\n"
"EdgeFeatureMsg edgeFeature\n"
"\n"
"#recognition confidence\n"
"float32 confidence\n"
"int32 x_pixel\n"
"int32 y_pixel\n"
"\n"
"================================================================================\n"
"MSG: visual_feature_server/BlobFeatureMsg\n"
"uint8 hHigh\n"
"uint8 sHigh\n"
"uint8 vHigh\n"
"uint8 hLow\n"
"uint8 sLow\n"
"uint8 vLow\n"
"#uint8 scale\n"
"uint8 threshold\n"
"\n"
"#pose of the feature\n"
"geometry_msgs/PoseWithCovarianceStamped centroid\n"
"#geometry_msgs/PoseWithCovarianceStamped top_left\n"
"#geometry_msgs/PoseWithCovarianceStamped top_right\n"
"#geometry_msgs/PoseWithCovarianceStamped bottom_left\n"
"#geometry_msgs/PoseWithCovarianceStamped bottom_right\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/PoseWithCovarianceStamped\n"
"# This expresses an estimated pose with a reference coordinate frame and timestamp\n"
"\n"
"Header header\n"
"PoseWithCovariance pose\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/PoseWithCovariance\n"
"# This represents a pose in free space with uncertainty.\n"
"\n"
"Pose pose\n"
"\n"
"# Row-major representation of the 6x6 covariance matrix\n"
"# The orientation parameters use a fixed-axis representation.\n"
"# In order, the parameters are:\n"
"# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)\n"
"float64[36] covariance\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: visual_feature_server/CornerFeatureMsg\n"
"uint8 threshold\n"
"#uint8 scale\n"
"\n"
"geometry_msgs/PoseWithCovarianceStamped centroid\n"
"\n"
"================================================================================\n"
"MSG: visual_feature_server/EdgeFeatureMsg\n"
"uint8 threshold\n"
"#uint8 scale\n"
"\n"
"# geometry_msgs/PoseWithCovarianceStamped p1\n"
"# geometry_msgs/PoseWithCovarianceStamped p2\n"
"geometry_msgs/PoseWithCovarianceStamped centroid\n"
;
  }

  static const char* value(const ::visual_feature_server::FeaturePoses_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::visual_feature_server::FeaturePoses_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.stamp);
      stream.next(m.features);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct FeaturePoses_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::visual_feature_server::FeaturePoses_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::visual_feature_server::FeaturePoses_<ContainerAllocator>& v)
  {
    s << indent << "stamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.stamp);
    s << indent << "features[]" << std::endl;
    for (size_t i = 0; i < v.features.size(); ++i)
    {
      s << indent << "  features[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::visual_feature_server::FeatureMsg_<ContainerAllocator> >::stream(s, indent + "    ", v.features[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // VISUAL_FEATURE_SERVER_MESSAGE_FEATUREPOSES_H
